---
name: Build SSM Agent
on:
    push:
        tags:
            - "*"
jobs:
    build-linux:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.20"
            - run: mkdir -p ./release/windows
            - run: go build -o release/linux/SSMAgent .
            - uses: vimtor/action-zip@v1
              with:
                  files: release/linux/SSMAgent release/linux/build.log
                  recursive: false
                  dest: SSMAgent-Linux-amd64.zip
            - uses: actions/upload-artifact@v4
              with:
                  name: ssm-build-linux
                  path: ${{ github.workspace }}/SSMAgent-Linux-amd64.zip
            - name: Get version
              id: versionnum
              run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}
            - name: Build and push
              uses: docker/build-push-action@v3
              with:
                  context: .
                  push: true
                  tags: mrhid6/ssmagent:latest , mrhid6/ssmagent:v${{ steps.versionnum.outputs.version }}
    build-windows:
        runs-on: self-hosted
        steps:
            - uses: actions/checkout@v3
            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.20"
            - run: mkdir -p ./release/windows
            - run: go build -o release/windows/SSMAgent.exe .
            - uses: vimtor/action-zip@v1
              with:
                  files: release/windows/SSMAgent.exe release/windows/build.log
                  recursive: false
                  dest: SSMAgent-Windows-x64.zip
            - uses: actions/upload-artifact@v4
              with:
                  name: ssm-build-win64
                  path: ${{ github.workspace }}/SSMAgent-Windows-x64.zip
    release:
        needs:
            - build-linux
            - build-windows
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Download a linux artifact
              uses: actions/download-artifact@v3
              with:
                  name: ssm-build-linux
            - name: Download a win64 artifact
              uses: actions/download-artifact@v3
              with:
                  name: ssm-build-win64
            - run: ls -l
            - name: Get version
              id: versionnum
              run: echo "version=$(cat VERSION)" >> $GITHUB_OUTPUT
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ steps.versionnum.outputs.version }}
                  release_name: Release v${{ steps.versionnum.outputs.version }}
                  draft: false
                  prerelease: false
            - name: Upload Linux Release Asset
              id: upload-linux-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./SSMAgent-Linux-amd64.zip
                  asset_name: SSMAgent-Linux-amd64.zip
                  asset_content_type: application/zip
            - name: Upload Windows Release Asset
              id: upload-win-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./SSMAgent-Windows-x64.zip
                  asset_name: SSMAgent-Windows-x64.zip
                  asset_content_type: application/zip
